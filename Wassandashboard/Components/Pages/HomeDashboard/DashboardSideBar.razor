@using static Wassandashboard.Data.Models.Enums.CommonEnums

@inject IDbContextFactory<Wassandashboard.Data.DashboardDbContext> DbFactory

<style>
    .layout-container {
    display: flex;
    height: 100vh;
    }

    .sidebar {
    background: #f8f9fa;
    width: 250px;
    transition: width 0.3s ease;
    overflow-y: auto;
    max-height: 100vh;
    }

    .content {
    flex-grow: 1;
    padding: 20px;
    overflow-y: auto;
    }

    .nav-link {
    font-weight: 500;
    color: #333;
    display: block;
    padding: 10px;
    text-decoration: none;
    cursor: pointer;
    }

    .nav-link:hover {
    background-color: #e9ecef;
    border-radius: 5px;
    }

        .nav-link.active {
            background-color: #007bff !important;
            color: white !important;
            border-radius: 5px;
        }


    .submenu {
    list-style: none;
    padding-left: 15px;
    margin: 0;
    display: none;
    }

    .submenu.show {
    display: block;
    }

    .report-container {
    flex-grow: 1;
    padding: 10px;
    display: flex;
    align-items: center;
    justify-content: center;
    }

    iframe {
    width: 100%;
    height: 100%;
    border: none;
    }
</style>

<div class="layout-container">
    <!-- Sidebar Section with Bootstrap Scrollbar -->
    <nav class="sidebar card py-2 mb-4 overflow-auto">
        <ul class="nav flex-column">
            @foreach (var item in menuItems)
            {
                <li class="nav-item">
                    @if (item.SubItems?.Any() == true)
                    {
                        <a href="javascript:void(0)"
                           class="nav-link d-flex justify-content-between align-items-center @(selectedMenuItem == item ? "active" : "")"
                           @onclick="() => ToggleSubmenu(item)">
                            @item.Title
                            <i class="bi small @(item.IsExpanded ? "bi-caret-up-fill" : "bi-caret-down-fill")"></i>
                        </a>
                        <ul class="submenu @(item.IsExpanded ? "show" : "")">
                            @foreach (var subItem in item.SubItems)
                            {
                                <li>
                                    <a class="nav-link @(selectedMenuItem == subItem ? "active" : "")"
                                       href="javascript:void(0)"
                                       @onclick="() => LoadContent(subItem)">
                                        @subItem.Title
                                    </a>
                                </li>
                            }
                        </ul>
                    }
                    else
                    {
                        <a class="nav-link @(selectedMenuItem == item ? "active" : "")"
                           href="javascript:void(0)"
                           @onclick="() => LoadContent(item)">
                            @item.Title
                        </a>
                    }
                </li>
            }

        </ul>
    </nav>


</div>

@code {
    [Parameter] public string PrivateOrPublic { get; set; } = string.Empty;

    private MenuItem selectedMenuItem;


    private List<ProjectLinks> privateReports = new List<ProjectLinks>();

    private List<ProjectLinks> publicReports = new List<ProjectLinks>();

    private List<MenuItem> privateMenuItems = new List<MenuItem>();

    private List<MenuItem> menuItems = new List<MenuItem>();

    protected override async Task OnInitializedAsync()
    {

        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            await LoadReports();
        }
        catch (Exception ex)
        {
            throw ex;   
        }
    }

    private async Task LoadReports()
    {
        try
        {
            using var context = DbFactory.CreateDbContext();

            var reports = await context.ProjectLinks.ToListAsync();

            if (reports != null && reports.Any())
            {
                privateReports = reports
                    .Where(x => x.IsPrivateOrPublic == (int)ProjectVisibility.Private)
                    .ToList();

                publicReports = reports
                    .Where(x => x.IsPrivateOrPublic == (int)ProjectVisibility.Public)
                    .ToList();

                menuItems = new List<MenuItem>();


                if (this.PrivateOrPublic == ProjectVisibility.Public.ToString())
                {
                    // Load and structure public reports
                    await LoadReportMenu(publicReports, context, menuItems);

                }
                else if (this.PrivateOrPublic == ProjectVisibility.Private.ToString())
                {
                    await LoadReportMenu(reports, context, menuItems);
                    
                }

               
             
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading reports: {ex.Message}");
        }
    }

    private async Task LoadReportMenu(List<ProjectLinks> reports, DashboardDbContext context, List<MenuItem> menuList)
    {
        if (reports == null || !reports.Any()) return;

        // Group multiple project links by Project ID
        var groupedProjects = reports
            .Where(x => !x.IsSingleLink)
            .GroupBy(x => x.ProjectId)
            .ToDictionary(g => g.Key, g => g.ToList());

        // Fetch all project names in one query
        var projects = await context.Projects
            .Where(p => groupedProjects.Keys.Contains(p.Id))
            .ToDictionaryAsync(p => p.Id, p => p.Name);

        foreach (var data in reports)
        {
            if (data != null)
            {
                if (data.IsSingleLink)
                {
                    // Directly add as a single item
                    menuList.Add(new MenuItem(data.ProjectId, data.ProjectReportName, data.ProjectLink));
                }
                else if (groupedProjects.ContainsKey(data.ProjectId))
                {
                    var subItems = groupedProjects[data.ProjectId]
                        .Select(x => new MenuItem(x.Id, x.ProjectReportName, x.ProjectLink))
                        .ToList();

                    // Get project name or default
                    var projectName = projects.ContainsKey(data.ProjectId) ? projects[data.ProjectId] : "Unknown Project";

                    if (!menuList.Any(m => m.ReportID == data.ProjectId && m.Title == projectName))
                    {
                        menuList.Add(new MenuItem(data.ProjectId, projectName, "#", subItems));
                    }
                }
            }
        }
    }

    private async Task ToggleSubmenu(MenuItem item)
    {
        item.IsExpanded = !item.IsExpanded;
    }

    private async Task LoadContent(MenuItem menuItem)
    {
        selectedMenuItem = menuItem; // Track the selected item
        StateHasChanged(); // Force UI update

        if (this.PrivateOrPublic == ProjectVisibility.Public.ToString())
        {
            _navigation.NavigateTo($"/publicreport/{menuItem.ReportID}");
        }
        else if (this.PrivateOrPublic == ProjectVisibility.Private.ToString())
        {
            _navigation.NavigateTo($"/privatereport/{menuItem.ReportID}");
        }
    }

    public class MenuItem
    {
        public long ReportID { get; set; } 
        public string Title { get; set; }
        public string Url { get; set; }
        public List<MenuItem>? SubItems { get; set; }
        public bool IsExpanded { get; set; }

        public MenuItem(long reportID,string title, string url, List<MenuItem>? subItems = null)
        {
            ReportID = reportID;
            Title = title;
            Url = url;
            SubItems = subItems;
        }
    }
}
