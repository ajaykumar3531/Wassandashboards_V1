@page "/Roles"

@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using Wassandashboard.Data.Constants
@using Wassandashboard.Data.Entities
@using Wassandashboard.Data
@inject ApplicationDbContext _context
@inject UserManager<ApplicationUser> UserManager
@inject RoleManager<IdentityRole> RoleManager

<PageTitle>Index</PageTitle>
<style>
    .table {
        width: 100%;
    }
</style>

<div class="row">
    <div class="d-flex justify-content-between align-items-center">
        <h4 class=" mt-3">Roles</h4>
        <button class="btn btn-sm btn-success float-end" @onclick=@(e=>Modal.Show<CreateRole>("Create Role"))>New Role</button>
    </div>
    <hr/>
    <div class="card">
    <QuickGrid Class="table" Items="roles" Pagination="pagination">
        <PropertyColumn Class="w-auto text-nowrap" Property="role =>role.Id " />
        <PropertyColumn Class="w-auto text-nowrap" Property="role =>role.Name " />
    @*     <PropertyColumn Class="w-auto text-nowrap" Property="role =>role.NormalizedName" />
     *@    <TemplateColumn Class="w-auto text-nowrap" Context="role">
            <button class="btn btn-primary
" @onclick="@(e=>ShowPermissions(role))">Permissions</button>
        </TemplateColumn>
    </QuickGrid>
    <Paginator State="pagination" />
  </div>
</div>
@code {

    public IQueryable<IdentityRole> roles { get; set; }
    PaginationState pagination = new PaginationState { ItemsPerPage = 10 };

    [CascadingParameter]
    public IModalService Modal { get; set; } = default!;
    protected override async Task OnInitializedAsync()
    {
        var list = await RoleManager.Roles.Where(x => x.Name.StartsWith(AppConstants.ApplicationRolePrefix)).ToListAsync();
        roles = list.AsQueryable();
    }

    private void ShowPermissions(IdentityRole role)
    {
        var parameters = new ModalParameters();
        parameters.Add("role", role);
        Modal.Show<ManagePermissions>("Manage Permissions",parameters:parameters);
    }

}
