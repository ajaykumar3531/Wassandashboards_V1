@page "/regions"
@inject IDbContextFactory<Wassandashboard.Data.DashboardDbContext> DbFactory

<h3 class="text-center mb-4" style="font-size: 24px; color: #3C3C3C;">Regions</h3>

@if (hasError)
{
    <div class="mt-3 mb-4 alert alert-danger text-center" role="alert" style="max-width: 500px; margin: 0 auto; background-color: #f8d7da; color: #721c24; border-color: #f5c6cb;">
        Please enter at least one region name before creating!
    </div>
}

@if (isSuccess)
{
    <div class="mt-3 mb-4 alert alert-success text-center" role="alert" style="max-width: 500px; margin: 0 auto; background-color: #d4edda; color: #155724; border-color: #c3e6cb;">
        Regions created successfully!
    </div>
}

@if (isFailure)
{
    <div class="mt-3 mb-4 alert alert-danger text-center" role="alert" style="max-width: 500px; margin: 0 auto; background-color: #f8d7da; color: #721c24; border-color: #f5c6cb;">
        Failed to create regions. Please try again.
    </div>
}

@for (int i = 0; i < RegionsList.Count; i++)
{
    var index = i;
    <div class="input-group mb-3 shadow-sm rounded" style="background-color: #f9f9f9; max-width: 500px; margin: 0 auto;">
        <input type="text" class="form-control border-secondary" placeholder="Enter region name"
               value="@RegionsList[index]"
               @oninput="e => UpdateRegion(index, e.Value.ToString())"
               style="border-radius: 8px; padding: 10px 15px; font-size: 16px; box-shadow: inset 0 0 10px rgba(0, 0, 0, 0.1);" />

        <button class="btn btn-success px-4" type="button" @onclick="AddRegion" style="border-radius: 8px; font-size: 16px;">
            <strong>+</strong>
        </button>

        @if (RegionsList.Count > 1)
        {
            <button class="btn btn-danger px-4" type="button" @onclick="() => RemoveRegion(index)" style="border-radius: 8px; font-size: 16px;">
                <strong>-</strong>
            </button>
        }
    </div>
}

<div class="d-flex justify-content-between mt-3" style="max-width: 500px; margin: 0 auto;">
    <button @onclick="CreateRegions" disabled="@(!RegionsList.Any() || isLoading)" class="btn btn-primary px-4 py-2"
            style="border-radius: 8px; font-size: 16px; background-color: #4CAF50; color: white;">
        @if (isLoading)
        {
            <div class="spinner-border text-primary" role="status" style="width: 2rem; height: 2rem;">
                <span class="sr-only">Loading...</span>
            </div>
        }
        else
        {
            <span>Create</span>
        }
    </button>
    <button @onclick="ClearAll" class="btn btn-danger px-4 py-2" style="border-radius: 8px; font-size: 16px; background-color: #f44336; color: white;">
        Clear
    </button>
</div>

@code {
    private List<string> RegionsList = new List<string> { "" };
    private bool hasError = false;
    private bool isSuccess = false;
    private bool isFailure = false;
    private bool isLoading = false;

    private async Task AddRegion()
    {
        await Task.Delay(100); // Simulate async action (e.g., server request)
        RegionsList.Add("");
    }

    private async Task RemoveRegion(int index)
    {
        if (RegionsList.Count > 1)
        {
            await Task.Delay(100); // Simulate async action
            RegionsList.RemoveAt(index);
        }
    }

    private async Task UpdateRegion(int index, string value)
    {
        await Task.Delay(50); // Simulate async action
        RegionsList[index] = value;
    }

    private async Task CreateRegions()
    {
        isLoading = true; // Start showing the spinner
        isSuccess = false;
        isFailure = false;

        if (RegionsList.Any(region => string.IsNullOrWhiteSpace(region)))
        {
            hasError = true;
            isLoading = false; // Stop the spinner if there is an error
        }
        else
        {
            hasError = false;
            try
            {
                using var context = DbFactory.CreateDbContext();

                // Add each region individually
                foreach (var regionName in RegionsList)
                {
                    context.Regions.Add(new Data.Entities.Regions
                        {
                            RegionName = regionName
                        });
                }

                await context.SaveChangesAsync();

                isSuccess = true;
            }
            catch (Exception ex)
            {
                isFailure = true;
                Console.WriteLine($"Error: {ex.Message}");
            }

            isLoading = false; // Stop showing the spinner
        }
    }

    private async Task ClearAll()
    {
        await Task.Delay(100); // Simulate async action
        RegionsList.Clear();
        RegionsList.Add("");
        hasError = false;
        isSuccess = false;
        isFailure = false;
    }
}
