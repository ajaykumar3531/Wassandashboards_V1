@page "/projects/delete"

@using Microsoft.EntityFrameworkCore
@using Wassandashboard.Data.Entities
@inject IDbContextFactory<Wassandashboard.Data.DashboardDbContext> DbFactory
@inject NavigationManager NavigationManager


<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<h3>Are you sure you want to delete this?</h3>
<div>
    <h4>Projects</h4>
    <hr />
    @if (projects is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Name</dt>
            <dd class="col-sm-10">@projects.Name</dd>
        </dl>
       
             
        <dl class="row">
            <dt class="col-sm-2">ContactNumber</dt>
            <dd class="col-sm-10">@projects.ContactNumber</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Email</dt>
            <dd class="col-sm-10">@projects.Email</dd>
        </dl>
      
        <EditForm method="post" Model="projects" OnValidSubmit="DeleteOrganization" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(projects is null)">Delete</button> |
            <a href="/projects">Back to List</a>
        </EditForm>
    }
</div>

@code {
    Projects? projects;

    [SupplyParameterFromQuery]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        projects = await context.Projects.FirstOrDefaultAsync(m => m.Id == Id);

        if (projects is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    public async Task DeleteOrganization()
    {
        using var context = DbFactory.CreateDbContext();
        context.Projects.Remove(projects!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/projects");
    }
}
